# TypeScript

## 페이지 소개
- TypeScript Study Note
  - YouTube 동영상 강의 참고
  - 타입스크립트 책 독학
  - 개인 프로젝트와 연관된 언어이고 현업에서 사용량이 증가 추세에 있어 학습
  - 객체 지향 언어인 자바를 익히고 이후 다른 객체 지향 언어로 확장
  
## TypeScript
### 타입스크립트 고유 문법
  - 타입 주석과 타입 추론
    - 타입 추론 : 타입 주석이 생략되는 경우 오른쪽의 값을 분석해서 왼쪽 변수의 타입을 결정함
    - 타입 추론 기능으로 자바스크립트로 작성된 파일의 확장자만 .ts로 바꾸면 타입스크립트 환경에서도 바로 동작함

  - 객체와 인터페이스
    - 인터페이스는 객체의 타입을 정의하는 것이 목적
    - 중괄호로 속성과 속성의 타입 주석을 나열하는 형태로 사용
    ```typescript
    interface 인터페이스 이름 {
      속성 이름[?]: 속성 타입[,...]
    }
    ```
    - 선택 속성 구문
      - 있어도 되고 없어도 되는 속성의 경우 선택 속성으로 정의
      ```typescript
      interface IPesrson {
        name: string // 필수 속성
        age: number // 필수 속성
        etc[?]: boolean // 선택 속성
      }
      ```
    - 익명 인터페이스
      - ai(anonymous interface)
      - 함수를 구현할 때 많이 사용
    - 인터페이스 구현
      - implements 키워드 사용
  
  - 객체와 클래스
    - 자바와 같은 객체지향 언어에서 흔히 볼 수 있는 class, private, public, protected, implements, extend와 같은 키워드 제공
    - 문법적인 차이 외에 의미는 다른 언어와 동일
    - 접근 제한자 : public, private, protect
    - 생성자 : constructor
    
  - 추상클래스
    - abstract 키워드 사용
    - 추상 클래스는 new 연사자를 적용해 객체를 생성할 수 없음
    
  - 클래스의 상속
    - extends 키워드를 사용해 상속 클래스를 생성
    - 부모클래스의 생성자를 super 키워드로 호출할 수 있음
    
  - static 속성
    - 다른 객체 지향 언어와 같이 정적인 속성을 가질 수 있음
    - 정적 속성 앞에 static을 붙여서 사용
    - '클래스이름.정적속성이름' 형태로 점 표기법을 사용해 값을 얻거나 설정
  
  - 튜플
    - 데이터 타입이 같으면 배열
    - 데이터 타입이 다르면 튜플
    
  - 제네릭 타입
    - 다양한 타입을 한꺼번에 취급할 수 있게 해줌
    
  - 대수 타입
    - 추상 데이터 타입
    
  - any 타입
    ```typescript
    let a: any = 0
    a = 'hello'
    a = true
    a = {}
    ```
    - 위 예시와 같이 타입이 any인 경우 타입과 무관하게 어떤 종류의 값도 저장할 수 있음
    
  - undefined
    - 자바스크립트에서 undefined는 값
    - 변수를 초기화하지 않으면 해당 변수는 undefined값을 가짐
    - 타입스크립트에서 undefined는 타입이기도 하고 값이기도 함
    - any는 모든 타입의 최상위 타입
    - undefined는 모든 타입의 최하위 타입
    
  - 템플릿 문자열
    - 변수에 담긴 값을 조합해 문자열을 만들수 있는 기능
    - `${변수 이름}`
 
  - 객체의 비구조화 할당문
    - 비구조화
      - 구조화된 데이터를 분해하는 것
    
    - 비구조화 할당
      - ESNext 자바스크립트 구문으로 타입스크립트에서도 사용 가능
      - 객체와 더불어 배열과 튜플에도 적용 가능
    
    - 잔여 연산자
      - ... 연산자 : 잔여 연산자 혹은 전개 연산자
      
  - 객체의 타입 변환
    - 타입 변환
    - 타입 단언(type assertion)
      - 두 가지 형태로 사용
      - (<타입>객체)
      - (객체 as 타입)
      
### 함수와 메서드
  - 함수 시그니처
    - 함수의 타입
    ```typescript
    let printMe: (string, number) => void = function (name: string, age: number): void {}
    ```
    - 선택적 매개변수 사용 가능
    
  - 함수표현식
    - 함수는 객체
    - 일등함수(first-class function)
      - 프로그래밍 언어가 일등 함수 가능을 제공하는 경우 '함수형 프로그래밍 언어'
      - 일등함수는 함수와 변수를구분하지 않음
      - 계산법 
        - 조급한 계산법(eager evaluation)
        - 느긋한 계산법(lazy evaluation)
      - 함수 호출 연산자
        - 함수표현식을 담고있는 변수 뒤에 ()를 붙임
        - 매개변수가 필요한 경우 ()안에 필요한 매개변수를 명시할 수 있음
      - 익명함수
      - const 키워드와 함수 표현식
        - 함수 표현식을 담는 변수는 let보다 const 키워드로 선언하는 것이 바람직
        - 함수는 앞으로 const 키워드로 선언
        
  - 활살표 함수와 표현식 문
    - 실행문과 표현식 문
      - 실행문은 CPU에서 실행되는 코드
      - 실행문은 실행만 될 뿐 결과를 알려주지 않아 결과를 알려면 반드시 return 키워드를 사용해야 함
      - 표현식 문은 CPU에서 실행된 결과를 return을 사용하지 않아도 알려줌
      
    - 복합 실행문
      - {}를 사용해 여러 실행문을 한 개의 실행문처럼 컴파일러가 인식할 수 있도록 함
      
    - 콜백 함수
      - 일등함수 기능을 제공하는 언어에서 함수는 '함수표현식'이라는 일종의 값
      - 함수 표현식을 매개변수로 받을 수 있음을 의미
      - 매개변수 형태로 동작하는 함수를 콜백 함수(callback function)
      
    - 고차함수와 클로저, 그리고 부분 함수
      - 고차함수 : 또 다른 함수를 반환하는 함수
      - 고차함수의 경우 클로저 기능이 반드시 필요
      - 고차함수의 필요 함수 호출 연산자보다 적게 호출하는 경우 '부분 어플리케이션', '부분 적용 함수'라고 함

- 배열
  - for in 문 : 인덱스값 순회
  - for of 문 : 아이텝값을 대상으로 순회
  - 제네릭 방식 타입 : T[]
  
